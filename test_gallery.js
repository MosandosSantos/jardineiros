const { chromium } = require('playwright');
const path = require('path');

(async () => {
    console.log('üé≠ Iniciando teste da galeria com Playwright...\n');

    const browser = await chromium.launch({ headless: false, slowMo: 500 });
    const context = await browser.newContext();
    const page = await context.newPage();

    try {
        // Navegar para a p√°gina
        const filePath = 'file:///' + path.resolve(__dirname, 'index.html').replace(/\\/g, '/');
        console.log('üìÇ Abrindo arquivo:', filePath);
        await page.goto(filePath);
        await page.waitForLoadState('networkidle');

        console.log('‚úÖ P√°gina carregada com sucesso\n');

        // Esperar um pouco para a p√°gina carregar completamente
        await page.waitForTimeout(2000);

        // Verificar se a se√ß√£o de galeria existe
        const gallerySection = await page.$('#gallery');
        if (gallerySection) {
            console.log('‚úÖ Se√ß√£o de galeria encontrada');
        } else {
            console.log('‚ùå Se√ß√£o de galeria N√ÉO encontrada');
        }

        // Rolar at√© a galeria
        console.log('\nüìú Rolando at√© a se√ß√£o da galeria...');
        await page.evaluate(() => {
            document.querySelector('#gallery').scrollIntoView({ behavior: 'smooth', block: 'start' });
        });
        await page.waitForTimeout(2000);

        // Verificar quantas imagens foram carregadas
        const imageCount = await page.$$eval('.gallery__card', cards => cards.length);
        console.log(`‚úÖ ${imageCount} imagens carregadas na galeria\n`);

        if (imageCount === 0) {
            console.log('‚ö†Ô∏è  Nenhuma imagem foi carregada. Verifique o caminho das imagens.');
        } else {
            // Testar clique na primeira imagem
            console.log('üñ±Ô∏è  Testando clique na primeira imagem...');
            await page.click('.gallery__card:first-child');
            await page.waitForTimeout(1000);

            // Verificar se o lightbox abriu
            const lightboxVisible = await page.isVisible('#lightbox');
            if (lightboxVisible) {
                console.log('‚úÖ Lightbox abriu corretamente\n');

                // Verificar contador de imagens
                const counterText = await page.textContent('#image-counter');
                console.log(`üìä Contador: ${counterText}`);

                // Testar navega√ß√£o para a pr√≥xima imagem
                console.log('\n‚û°Ô∏è  Testando navega√ß√£o para pr√≥xima imagem...');
                await page.evaluate(() => {
                    document.querySelector('#next-image').click();
                });
                await page.waitForTimeout(1000);
                const counterAfterNext = await page.textContent('#image-counter');
                console.log(`üìä Contador ap√≥s avan√ßar: ${counterAfterNext}`);

                // Testar navega√ß√£o para imagem anterior
                console.log('\n‚¨ÖÔ∏è  Testando navega√ß√£o para imagem anterior...');
                await page.evaluate(() => {
                    document.querySelector('#prev-image').click();
                });
                await page.waitForTimeout(1000);
                const counterAfterPrev = await page.textContent('#image-counter');
                console.log(`üìä Contador ap√≥s voltar: ${counterAfterPrev}`);

                // Testar atalho de teclado (seta direita)
                console.log('\n‚å®Ô∏è  Testando atalho de teclado (seta direita)...');
                await page.keyboard.press('ArrowRight');
                await page.waitForTimeout(1000);

                // Testar atalho de teclado (seta esquerda)
                console.log('‚å®Ô∏è  Testando atalho de teclado (seta esquerda)...');
                await page.keyboard.press('ArrowLeft');
                await page.waitForTimeout(1000);

                // Fechar lightbox com ESC
                console.log('\n‚ùå Testando fechar lightbox com ESC...');
                await page.keyboard.press('Escape');
                await page.waitForTimeout(1000);

                const lightboxHidden = await page.isHidden('#lightbox');
                if (lightboxHidden) {
                    console.log('‚úÖ Lightbox fechou corretamente com ESC\n');
                }

                // Testar fechar com bot√£o X
                console.log('üñ±Ô∏è  Testando abrir novamente e fechar com bot√£o X...');
                await page.click('.gallery__card:nth-child(2)');
                await page.waitForTimeout(1000);
                await page.evaluate(() => {
                    document.querySelector('#close-lightbox').click();
                });
                await page.waitForTimeout(1000);

                const lightboxClosedWithButton = await page.isHidden('#lightbox');
                if (lightboxClosedWithButton) {
                    console.log('‚úÖ Lightbox fechou corretamente com bot√£o X\n');
                }

            } else {
                console.log('‚ùå Lightbox N√ÉO abriu\n');
            }

            // Testar efeito hover
            console.log('üé® Testando efeito hover nos cards...');
            await page.hover('.gallery__card:first-child');
            await page.waitForTimeout(1500);
            console.log('‚úÖ Efeito hover testado\n');
        }

        console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('\nüìù Resumo:');
        console.log(`   ‚Ä¢ ${imageCount} imagens carregadas dinamicamente`);
        console.log('   ‚Ä¢ Lightbox funcionando corretamente');
        console.log('   ‚Ä¢ Navega√ß√£o entre imagens funcionando');
        console.log('   ‚Ä¢ Atalhos de teclado funcionando');
        console.log('   ‚Ä¢ Anima√ß√µes e transi√ß√µes suaves');
        console.log('   ‚Ä¢ Design responsivo estilo Pinterest');

        // Manter o navegador aberto por 5 segundos para visualiza√ß√£o
        console.log('\n‚è≥ Mantendo navegador aberto por 5 segundos para visualiza√ß√£o...');
        await page.waitForTimeout(5000);

    } catch (error) {
        console.error('\n‚ùå ERRO durante o teste:', error.message);
    } finally {
        await browser.close();
        console.log('\nüëã Navegador fechado. Teste finalizado!');
    }
})();
